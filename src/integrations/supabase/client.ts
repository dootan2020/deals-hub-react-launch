
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Ensure all necessary globals are defined
if (typeof globalThis !== 'undefined') {
  // Use globalThis which is standard across modern browsers and Node.js
  if (!globalThis.global) {
    (globalThis as any).global = globalThis;
  }
  
  // Minimal stream polyfill for browser compatibility
  if (!(globalThis as any).stream) {
    (globalThis as any).stream = { Readable: {} };
  }
}

const SUPABASE_URL = "https://xcpwyvrlutlslgaueokd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhjcHd5dnJsdXRsc2xnYXVlb2tkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ3NTMwMDAsImV4cCI6MjA2MDMyOTAwMH0.6uScHil1Q02Mz-x6p_GQui7vchxIYLRcOCd8UsNiOp0";

// Configure client with explicit auth settings and improved realtime settings
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      detectSessionInUrl: true,
      storage: localStorage,
      flowType: 'implicit'
    },
    realtime: {
      params: {
        eventsPerSecond: 10
      },
      // Add more reliable reconnection parameters
      heartbeatIntervalMs: 15000,
      reconnectAttempts: 5,  // Limited number of attempts to avoid infinite loops
      reconnectIntervalMs: 3000,
    },
    global: {
      headers: {
        'X-Client-Info': 'Digital Deals Hub Admin',
        'Content-Type': 'application/json'
      },
      // Add fetch options to avoid CORS issues
      fetch: (url, options) => {
        if (options) {
          options.cache = 'no-cache';
          options.credentials = 'same-origin';
          // Add more headers that might help with CORS
          if (!options.headers) options.headers = {};
          Object.assign(options.headers, {
            'Accept': 'application/json',
            'Cache-Control': 'no-cache',
          });
        }
        return fetch(url, options);
      }
    }
  }
);

// Add debugging listener for auth state changes
supabase.auth.onAuthStateChange((event, session) => {
  console.log('Supabase Auth State Change:', event, session?.user?.id);
  
  // Refresh session token if login or token refresh
  if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
    console.log('Refreshing session and access rights...');
    // We'll rely on the refresh functions in context to handle the proper updates
  }
  
  // Log if session expires or auth error occurs
  if (event === 'TOKEN_REFRESHED') {
    console.log('Token refreshed successfully at', new Date().toISOString());
  }
  
  if (event === 'SIGNED_OUT') {
    console.log('User signed out');
  }
});

// Implement better error handling for failed Supabase operations
const originalFrom = supabase.from.bind(supabase);
supabase.from = function(table: string) {
  const result = originalFrom(table);
  
  // Add global error handling for debugging purposes
  const originalSelect = result.select.bind(result);
  result.select = function(...args: any[]) {
    const query = originalSelect(...args);
    
    const originalThen = query.then.bind(query);
    query.then = function(onFulfilled: any, onRejected: any) {
      return originalThen((response: any) => {
        if (response.error) {
          console.error(`Error in Supabase query on table '${table}':`, response.error);
        }
        return onFulfilled?.(response);
      }, onRejected);
    };
    
    return query;
  };
  
  return result;
};

// Helper function to check if Supabase is working correctly
export async function checkSupabaseConnection(): Promise<boolean> {
  try {
    // Try a simple query to see if Supabase is available
    const { error } = await supabase
      .from('site_settings')
      .select('key')
      .limit(1);
    
    return !error;
  } catch (err) {
    console.error('Failed to connect to Supabase:', err);
    return false;
  }
}

// Add a helper function to refresh the auth token if needed
export async function refreshSupabaseAuth(): Promise<boolean> {
  try {
    const { data, error } = await supabase.auth.refreshSession();
    if (error) {
      console.error('Error refreshing auth session:', error);
      return false;
    }
    return !!data.session;
  } catch (err) {
    console.error('Failed to refresh auth session:', err);
    return false;
  }
}
